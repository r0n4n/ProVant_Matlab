classdef SensorArray < robotics.ros.Message
    %SensorArray MATLAB implementation of simulator_msgs/SensorArray
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2018 The MathWorks, Inc.
    
    properties (Constant)
        MessageType = 'simulator_msgs/SensorArray' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7fb8f5c9c9a0867741527e16fb54c2da' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Header
        Name
        Values
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Values', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Name', 'Values'} % List of non-constant message properties
        ROSPropertyList = {'header', 'name', 'values'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SensorArray(msg)
            %SensorArray Construct the message object SensorArray
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            for i = 1:length(msg)
                obj(i,1).JavaMessage = msg(i); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = robotics.ros.msggen.std_msgs.Header(obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {'robotics.ros.msggen.std_msgs.Header'}, {'nonempty', 'scalar'}, 'SensorArray', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header = robotics.ros.msggen.std_msgs.Header(obj.JavaMessage.getHeader);
            end
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            validateattributes(name, {'char'}, {}, 'SensorArray', 'name');
            
            obj.JavaMessage.setName(name);
        end
        
        function values = get.Values(obj)
            %get.Values Get the value for property Values
            if isempty(obj.Cache.Values)
                javaArray = obj.JavaMessage.getValues;
                array = obj.readJavaArray(javaArray, 'robotics.ros.custom.msggen.simulator_msgs.Sensor');
                obj.Cache.Values = robotics.ros.custom.msggen.simulator_msgs.Sensor(array);
            end
            values = obj.Cache.Values;
        end
        
        function set.Values(obj, values)
            %set.Values Set the value for property Values
            if ~isvector(values) && isempty(values)
                % Allow empty [] input
                values = robotics.ros.custom.msggen.simulator_msgs.Sensor.empty(0,1);
            end
            
            validateattributes(values, {'robotics.ros.custom.msggen.simulator_msgs.Sensor'}, {'vector'}, 'SensorArray', 'values');
            
            javaArray = obj.JavaMessage.getValues;
            array = obj.writeJavaArray(values, javaArray, 'robotics.ros.custom.msggen.simulator_msgs.Sensor');
            obj.JavaMessage.setValues(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Values)
                obj.Cache.Values = [];
                obj.Cache.Values = obj.Values;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Values = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Name = obj.Name;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Values = copy(obj.Values);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Name = strObj.Name;
            obj.Header = robotics.ros.msggen.std_msgs.Header.loadobj(strObj.Header);
            ValuesCell = arrayfun(@(x) robotics.ros.custom.msggen.simulator_msgs.Sensor.loadobj(x), strObj.Values, 'UniformOutput', false);
            obj.Values = vertcat(ValuesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Name = obj.Name;
            strObj.Header = saveobj(obj.Header);
            strObj.Values = arrayfun(@(x) saveobj(x), obj.Values);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.simulator_msgs.SensorArray.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.simulator_msgs.SensorArray;
            obj.reload(strObj);
        end
    end
end
